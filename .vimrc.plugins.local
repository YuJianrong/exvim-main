" This file will be loaded after .vimrc.plugins, 
" but before 'filetype plugin on', 'filetype indent on' and 'syntax on' been executed. 
" This file is designed to be safe to add your own plugins and plugins' configuration.

if has('gui_running')
    set background=light
else
    set background=dark
endif
colorscheme solarized

let g:solarized_contrast = "high"



""--------------------------------------------------------------------------------
"" ==== Plugin settings ====


" --------------------
" TagBar
" --------------------
" F2:  Switch on/off TagBar
nnoremap <silent> <F2> :TagbarOpen<CR>
" ctags find the tags file from the current path instead of the path of
" currect file
au BufNewFile,BufEnter * set cpoptions+=d
let g:tagbar_autoclose = 1 "automatically close when you jump to a tag.
let g:tagbar_autofocus = 1 "move to the Tagbar window when it is opened.
let g:tagbar_usearrows = 0
let g:tagbar_autoshowtag = 1
let g:tagbar_closeWindowKey = "<F2>"


" --------------------
" MiniBufExpl
" --------------------
let g:miniBufExplTabWrap = 1 " make tabs show complete (no broken on two lines) 
let g:miniBufExplModSelTarget = 1 " If you use other explorers like TagList you can (As of 6.2.8) put:
let g:miniBufExplUseSingleClick = 1 " If you would like to single click on tabs rather than double clicking on them to goto the selected buffer. 
" let g:miniBufExplMaxSize = 1 " <max lines: default 0> setting this to 0 will mean the window gets as big as needed to fit all your buffers. 

"for buffers that have NOT CHANGED and are NOT VISIBLE.
hi MBENormal guibg=White
" for buffers that HAVE CHANGED and are NOT VISIBLE
hi MBEChanged guibg=Red 
" buffers that have NOT CHANGED and are VISIBLE
hi MBEVisibleNormal guibg=Gray
" buffers that have CHANGED and are VISIBLE
hi MBEVisibleChanged guibg=DarkRed



" --------------------
" EnhCommentify
" --------------------
" F11:  Insert/Remove C++ Comment ("//") before all the lines of the selection
function EnhCommentifyCallback(ft)
    if a:ft == 'lingo'
        let b:ECcommentOpen = '--'
        let b:ECcommentClose = ''
    elseif a:ft == 'go'
        let b:ECcommentOpen = '//'
        let b:ECcommentClose = ''
    elseif a:ft =~ '^\(hlsl\|swig\|c\|objc\)$' " NOTE: we have to rewrite the c comment behavior. 
        let b:ECcommentOpen = '//'
        let b:ECcommentClose = ''
    elseif a:ft == 'snippet' " for snippet
        let b:ECcommentOpen = '#'
        let b:ECcommentClose = ''
    elseif a:ft == 'maxscript' " for maxscript
        let b:ECcommentOpen = '--'
        let b:ECcommentClose = ''
    elseif a:ft == 'typescript'
        let b:ECcommentOpen = '//'
        let b:ECcommentClose = ''
    endif
endfunction
let g:EnhCommentifyCallbackExists = 'Yes'
let g:EnhCommentifyFirstLineMode='yes'
let g:EnhCommentifyRespectIndent='yes'
let g:EnhCommentifyUseBlockIndent='yes'
let g:EnhCommentifyAlignRight = 'yes'
let g:EnhCommentifyPretty = 'yes'
let g:EnhCommentifyBindInNormal = 'no'
let g:EnhCommentifyBindInVisual = 'no'
let g:EnhCommentifyBindInInsert = 'no'
vmap <F11> <Plug>VisualFirstLinegv
nmap <F11> <Plug>FirstLine
imap <F11> <ESC><Plug>FirstLine
" vmap <F11> <Plug>VisualComment
" nmap <F11> <Plug>Comment
" imap <F11> <ESC><Plug>Comment
" vmap <C-F11> <Plug>VisualDeComment
" nmap <C-F11> <Plug>DeComment
" imap <C-F11> <ESC><Plug>DeComment

" -------------------
" OmniCppComplete
" -------------------
" use global scope search
let OmniCpp_GlobalScopeSearch = 1

" 0 = namespaces disabled
" 1 = search namespaces in the current buffer
" 2 = search namespaces in the current buffer and in included files
let OmniCpp_NamespaceSearch = 1

" 0 = auto
" 1 = always show all members
let OmniCpp_DisplayMode = 1

" 0 = don't show scope in abbreviation
" 1 = show scope in abbreviation and remove the last column
let OmniCpp_ShowScopeInAbbr = 0

" This option allows to display the prototype of a function in the abbreviation part of the popup menu.
" 0 = don't display prototype in abbreviation
" 1 = display prototype in abbreviation
let OmniCpp_ShowPrototypeInAbbr = 1

" This option allows to show/hide the access information ('+', '#', '-') in the popup menu.
" 0 = hide access
" 1 = show access
let OmniCpp_ShowAccess = 1

" This option can be use if you don't want to parse using namespace declarations in included files and want to add namespaces that are always used in your project.
let OmniCpp_DefaultNamespaces = ["std"]

" Complete Behaviour
let OmniCpp_MayCompleteDot = 0
let OmniCpp_MayCompleteArrow = 0
let OmniCpp_MayCompleteScope = 0

" When 'completeopt' does not contain "longest", Vim automatically select the first entry of the popup menu. You can change this behaviour with the OmniCpp_SelectFirstItem option.
let OmniCpp_SelectFirstItem = 0

" vims under after/ftplugin does not executed, just call it manually
" OmniCppComplete initialization
au BufNewFile,BufRead *.c call omni#cpp#complete#Init()
au BufNewFile,BufRead *.cpp call omni#cpp#complete#Init()



" -------------------
" ShowMarks
" -------------------
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

" For marks a-z
hi ShowMarksHLl term=bold cterm=none ctermbg=LightBlue gui=none guibg=LightBlue
" For marks A-Z
hi ShowMarksHLu term=bold cterm=bold ctermbg=LightRed ctermfg=DarkRed gui=bold guibg=LightRed guifg=DarkRed
" For all other marks
hi ShowMarksHLo term=bold cterm=bold ctermbg=LightYellow ctermfg=DarkYellow gui=bold guibg=LightYellow guifg=DarkYellow
" For multiple marks on the same line.
hi ShowMarksHLm term=bold cterm=none ctermbg=LightBlue gui=none guibg=SlateBlue

let g:showmarks_enable = 1
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
" Ignore help, quickfix, non-modifiable buffers
let showmarks_ignore_type = "hqm"
" Hilight lower & upper marks
let showmarks_hlline_lower = 1
let showmarks_hlline_upper = 0 


" -------------------
" LookupFile 
" -------------------
nnoremap <unique> <A-S-i> :LUTags<CR>
nnoremap <unique> <leader>lf :LUTags<CR>
nnoremap <unique> <leader>lb :LUBufs<CR>
nnoremap <unique> <silent> <Leader>lg :LUCurWord<CR>
let g:LookupFile_TagExpr = ''
let g:LookupFile_MinPatLength = 3
let g:LookupFile_PreservePatternHistory = 0
let g:LookupFile_PreserveLastPattern = 0
let g:LookupFile_AllowNewFiles = 0
let g:LookupFile_smartcase = 1
let g:LookupFile_EscCancelsPopup = 1

" ------------------------------------------------------------------ 
" Desc: zencoding 
" ------------------------------------------------------------------ 

let g:user_zen_leader_key = '<c-z>'

